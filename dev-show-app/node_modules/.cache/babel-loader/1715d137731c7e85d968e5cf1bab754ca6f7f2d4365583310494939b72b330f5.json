{"ast":null,"code":"import _defineProperty from \"/Users/mackayfisher/Desktop/Projects/Personal_website/dev-show-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { useCallback as t } from \"react\";\nimport e from \"zustand\";\nimport { redux as r } from \"zustand/middleware\";\nvar o = function o(t, e) {\n    if (!t.includes(e)) throw new Error(\"'\".concat(e, \"' not found. It must be provided in initialState as a property key.\"));\n  },\n  n = function n(r) {\n    var n = e(function () {\n        return r;\n      }),\n      s = Object.keys(r),\n      a = function a(t, e) {\n        \"production\" !== process.env.NODE_ENV && o(s, t), n.setState(function (r) {\n          return _defineProperty({}, t, (o = r[t], n = e, \"function\" == typeof n ? n(o) : n));\n          var o, n;\n        });\n      };\n    return {\n      useGlobalState: function useGlobalState(e) {\n        \"production\" !== process.env.NODE_ENV && o(s, e);\n        var r = t(function (t) {\n          return t[e];\n        }, [e]);\n        return [n(r), t(function (t) {\n          return a(e, t);\n        }, [e])];\n      },\n      getGlobalState: function getGlobalState(t) {\n        return \"production\" !== process.env.NODE_ENV && o(s, t), n.getState()[t];\n      },\n      setGlobalState: a,\n      subscribe: function subscribe(t, e) {\n        n.subscribe(function (r, o) {\n          r[t] !== o[t] && e(r[t]);\n        });\n      }\n    };\n  },\n  s = function s(o) {\n    var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : o(void 0, {\n      type: void 0\n    });\n    var a = arguments.length > 2 ? arguments[2] : undefined;\n    if (a) return a(s)(o, n);\n    var i = e(r(o, n)),\n      u = Object.keys(n),\n      c = function c(e) {\n        \"production\" !== process.env.NODE_ENV && function (t, e) {\n          if (!t.includes(e)) throw new Error(\"'\".concat(e, \"' not found. It must be provided in initialState as a property key.\"));\n        }(u, e);\n        var r = t(function (t) {\n          return t[e];\n        }, [e]);\n        return i(r);\n      };\n    return {\n      useStoreState: c,\n      useGlobalState: function useGlobalState(e) {\n        return \"production\" !== process.env.NODE_ENV && console.warn(\"[DEPRECATED] useStoreState instead\"), [c(e), t(function (t) {\n          i.setState(function (r) {\n            return _defineProperty({}, e, (o = r[e], n = t, \"function\" == typeof n ? n(o) : n));\n            var o, n;\n          });\n        }, [e])];\n      },\n      getState: i.getState,\n      dispatch: i.dispatch\n    };\n  };\nexport { n as createGlobalState, s as createStore };","map":{"version":3,"names":["o","t","e","includes","Error","concat","n","r","s","Object","keys","a","process","env","NODE_ENV","setState","_defineProperty","useGlobalState","getGlobalState","getState","setGlobalState","subscribe","arguments","length","undefined","type","i","u","c","useStoreState","console","warn","dispatch","createGlobalState","createStore"],"sources":["/Users/mackayfisher/Desktop/Projects/Personal_website/dev-show-app/node_modules/react-hooks-global-state/src/createGlobalState.ts","/Users/mackayfisher/Desktop/Projects/Personal_website/dev-show-app/node_modules/react-hooks-global-state/src/createStore.ts"],"sourcesContent":["import { SetStateAction, useCallback } from 'react';\n\nimport create from 'zustand';\n\nconst validateStateKey = (keys: string[], stateKey: string) => {\n  if (!keys.includes(stateKey)) {\n    throw new Error(`'${stateKey}' not found. It must be provided in initialState as a property key.`);\n  }\n};\n\nconst isFunction = (fn: unknown): fn is Function => (typeof fn === 'function');\n\nconst updateValue = <Value>(oldValue: Value, newValue: SetStateAction<Value>) => (\n  isFunction(newValue) ? newValue(oldValue) : newValue\n);\n\n/**\n * Create a global state.\n *\n * It returns a set of functions\n * - `useGlobalState`: a custom hook works like React.useState\n * - `getGlobalState`: a function to get a global state by key outside React\n * - `setGlobalState`: a function to set a global state by key outside React\n * - `subscribe`: a function that subscribes to state changes\n *\n * @example\n * import { createGlobalState } from 'react-hooks-global-state';\n *\n * const { useGlobalState } = createGlobalState({ count: 0 });\n *\n * const Component = () => {\n *   const [count, setCount] = useGlobalState('count');\n *   ...\n * };\n */\nexport const createGlobalState = <State extends object>(initialState: State) => {\n  const useStore = create<State>(() => initialState);\n\n  type StateKeys = keyof State;\n  const keys = Object.keys(initialState);\n\n  const setGlobalState = <StateKey extends StateKeys>(\n    stateKey: StateKey,\n    update: SetStateAction<State[StateKey]>,\n  ) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    useStore.setState((previousState) => ({\n      [stateKey]: updateValue(previousState[stateKey], update),\n    } as Pick<State, StateKey> as Partial<State>));\n  };\n\n  const useGlobalState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    const selector = useCallback((state: State) => state[stateKey], [stateKey]);\n    const partialState = useStore(selector);\n    const updater = useCallback(\n      (u: SetStateAction<State[StateKey]>) => setGlobalState(stateKey, u),\n      [stateKey],\n    );\n    return [partialState, updater] as const;\n  };\n\n  const getGlobalState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    return useStore.getState()[stateKey];\n  };\n\n  const subscribe = <StateKey extends StateKeys>(\n    stateKey: StateKey,\n    listener: (value: State[StateKey]) => void,\n  ) => {\n    useStore.subscribe((state, prevState) => {\n      if (state[stateKey] !== prevState[stateKey]) {\n        listener(state[stateKey]);\n      }\n    });\n  };\n\n  return {\n    useGlobalState,\n    getGlobalState,\n    setGlobalState,\n    subscribe,\n  };\n};\n","/* eslint @typescript-eslint/no-explicit-any: off */\n\nimport { Reducer, SetStateAction, useCallback } from 'react';\n\nimport create from 'zustand';\nimport { redux } from 'zustand/middleware';\n\ntype ExtractState<S> = S extends {\n  getState: () => infer T;\n} ? T : never;\n\nconst validateStateKey = (keys: string[], stateKey: string) => {\n  if (!keys.includes(stateKey)) {\n    throw new Error(`'${stateKey}' not found. It must be provided in initialState as a property key.`);\n  }\n};\n\nconst isFunction = (fn: unknown): fn is Function => (typeof fn === 'function');\n\nconst updateValue = <Value>(oldValue: Value, newValue: SetStateAction<Value>) => (\n  isFunction(newValue) ? newValue(oldValue) : newValue\n);\n\n/**\n * Create a global store.\n *\n * It returns a set of functions\n * - `useStoreState`: a custom hook to read store state by key\n * - `getState`: a function to get store state by key outside React\n * - `dispatch`: a function to dispatch an action to store\n *\n * A store works somewhat similarly to Redux, but not the same.\n *\n * @example\n * import { createStore } from 'react-hooks-global-state';\n *\n * const initialState = { count: 0 };\n * const reducer = ...;\n *\n * const store = createStore(reducer, initialState);\n * const { useStoreState, dispatch } = store;\n *\n * const Component = () => {\n *   const count = useStoreState('count');\n *   ...\n * };\n */\nexport const createStore = <State extends object, Action extends { type: unknown }>(\n  reducer: Reducer<State, Action>,\n  initialState: State = (reducer as any)(undefined, { type: undefined }),\n  enhancer?: any,\n): Store<State, Action> => {\n  if (enhancer) return enhancer(createStore)(reducer, initialState);\n\n  const useStore = create(redux(reducer, initialState));\n\n  type BoundState = ExtractState<typeof useStore>;\n  type StateKeys = keyof BoundState;\n  const keys = Object.keys(initialState);\n\n  const useStoreState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    const selector = useCallback(\n      (state: BoundState) => state[stateKey],\n      [stateKey],\n    );\n    return useStore(selector);\n  };\n\n  const useGlobalState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.warn('[DEPRECATED] useStoreState instead');\n    }\n    const partialState = useStoreState(stateKey);\n    const updater = useCallback(\n      (update: SetStateAction<BoundState[StateKey]>) => {\n        useStore.setState((previousState) => ({\n          [stateKey]: updateValue(previousState[stateKey], update),\n        } as Pick<BoundState, StateKey> as Partial<BoundState>));\n      },\n      [stateKey],\n    );\n    return [partialState, updater] as const;\n  };\n\n  return {\n    useStoreState,\n    useGlobalState,\n    getState: useStore.getState,\n    dispatch: useStore.dispatch,\n  } as unknown as Store<State, Action>;\n};\n\ntype Store<State, Action> = {\n  useStoreState: <StateKey extends keyof State>(stateKey: StateKey) => State[StateKey];\n  /**\n   * useGlobalState created by createStore is deprecated.\n   *\n   * @deprecated useStoreState instead\n   */\n  useGlobalState: <StateKey extends keyof State>(stateKey: StateKey) => readonly [\n    State[StateKey],\n    (u: SetStateAction<State[StateKey]>) => void,\n  ];\n  getState: () => State;\n  dispatch: (action: Action) => Action;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}